
funcao separarSegmento{
// para separar os dados basta pegar as posições certas
Dados aplicacao
Numero porta fonte (16 bits)
Numero porta destino (16 bits)
Janela de recepção (16 bits)
Comprimento de cabeçalho (4 bits)
Flag (6 bits) (ACK,RST,SYN,FIN,PSH,URG)
Soma de verificação
}

funcao tcp{
server_isn = aleatorio
// cabeçalho tcp
Numero porta fonte (16 bits)
Numero porta destino (16 bits)
Janela de recepção (16 bits)
Comprimento de cabeçalho (4 bits)
Flag (6 bits) (ACK,RST,SYN,FIN,PSH,URG)
Soma de verificação

// para formar o segmento tcp
segmento = mensagem + cabeçalho

//apresentação de três vias
recebe segmento tcp com SYN=1 , numeroSeq = client_isn e separa segmento
envia segmento tcp com SYN=1 , numeroSeq = server_isn, numeroDeReconhecimento = client_isn +1 e reserva buffers e variaveis para conexão
recebe segmento tcp com SYN=0 , numeroDeReconhecimento = server_isn +1 e separa segmento

loop (True):
        switch(evento):
                evento: chegada de segmento na ordem com numero de segmento esperado, todos dados anteriores foram reconhecidos
                        envia um ack retardado, esperando algum tempo e se o segmento seguinte não chegar nesse tempo, envia o ACK
                evento: chegada de segmento na ordem com numero de segmento esperado, existe um segmento esperando por transmissão de ACK
                        envia um ack cumulativo , reconhecendo os segmentos na ordem
                evento: chegada de segmento fora de ordem com numero de segmento mais alto do que o esperado, lacuna detectada
                        envia um ack duplicado , para o segmento anterior a lacuna
                evento: chegada de segmento que preenche parcialmente a lacuna
                        envio de um ack
// fechar conexão
recebe segmento tcp com FIN=1
envia segmento tcp de reconhecimento
envia segmento tcp de com FIN=1
recebe segmento de reconhecimento do client TCP


}
